package com.movemoney.storage

import com.movemoney.domain.Account
import com.movemoney.domain.BacsTransaction
import spock.lang.Specification

import static com.movemoney.storage.Fixtures.*

class MemoryStorageTest extends Specification {

    // Transaction
    def "findTransaction should return empty when not found"() {
        given:
        Storage memoryStorage = new MemoryStorage()

        expect:
        memoryStorage.findTransaction(BacsTransaction.Id.autoGenerated()).isEmpty()
    }


    def "findTransaction returns storedTransaction"() {
        given:
        Storage memoryStorage = new MemoryStorage()

        when:
        memoryStorage.storeTransaction(debitBacsTransaction)

        then:
        memoryStorage.findTransaction(debitBacsTransaction.id).present
        memoryStorage.findTransaction(debitBacsTransaction.id).get().equals(debitBacsTransaction)
    }


    def "For duplicate entries storeTransaction should throw an exception "() {
        given:
        Storage memoryStorage = new MemoryStorage()

        when:
        memoryStorage.storeTransaction(debitBacsTransaction)
        memoryStorage.storeTransaction(debitBacsTransaction)

        then:
        thrown(StorageException)
    }

    def "findTransaction returns all transactions for Account"() {
        given:
        Storage memoryStorage = new MemoryStorage()

        when:
        memoryStorage.storeTransaction(borisToTheresaBacsTransaction_1)
        memoryStorage.storeTransaction(borisToTheresaBacsTransaction_2)
        memoryStorage.storeTransaction(theresaToBorisBacsTransaction_1)
        memoryStorage.storeTransaction(theresaToBorisBacsTransaction_2)

        then:
        memoryStorage.findTransactions(boris.id).size() == 4
        memoryStorage.findTransactions(boris.id)
                .containsAll(borisToTheresaBacsTransaction_1,
                        borisToTheresaBacsTransaction_2,
                        theresaToBorisBacsTransaction_1,
                        theresaToBorisBacsTransaction_2)
    }


    // Account
    def "findAccount should return empty when not found"() {
        given:
        Storage memoryStorage = new MemoryStorage()

        expect:
        memoryStorage.findAccount(Account.Id.autoGenerated()).empty
    }

    def "findAccount returns storedAccount"() {
        given:
        Storage memoryStorage = new MemoryStorage()

        when:
        memoryStorage.createAccount(boris)

        then:
        memoryStorage.findAccount(boris.id).present
        memoryStorage.findAccount(boris.id).get().equals(boris)
    }

    def "For duplicate entries storeAccount should throw an exception "() {
        given:
        Storage memoryStorage = new MemoryStorage()

        when:
        memoryStorage.createAccount(boris)
        memoryStorage.createAccount(boris)

        then:
        thrown(StorageException)
    }
}
